This folder contains my solutions for the first lab of the Digital Systems 2 course (ME587) at UFPE.
The exercises focus on basic low-level ARM Assembly programming using the Visual2 simulator.

1️⃣ Immediate values and memory: Load immediate values (0x12, 0x12AB, 0x12AB34, 0x12AB34CD) into R0–R3, store them at addresses 0x100–0x10C, and read them back into R8–R11.

2️⃣ Loops and Fibonacci: Use a loop to calculate and store the first 50 Fibonacci terms (F(0)=1, F(1)=1, F(n)=F(n-1)+F(n-2)).

3️⃣ Overflow analysis:
A 32-bit register can store values up to 0xFFFFFFFF (2³² - 1, or 4.2 billion, unsigned).
The sequence starts at index 0 with the first term as 1.
The 47th term (at index 46) is the first to appear negative in signed view, though its binary bits remain correct.
The 48th term (at index 47) exceeds the 32-bit maximum (4,294,967,295), causing real overflow: the binary bits no longer represent the true Fibonacci number.
Thus, in 32-bit registers, the Fibonacci sequence breaks at index 47 (the 48th term).

4️⃣ Low-level multiplication: Implement multiplication of two numbers in Assembly, storing the result in memory.

5️⃣ Code reuse for factorial: Reuse the multiplication code to calculate factorials.

6️⃣ Euclidean division: Calculate the quotient and remainder of integer division.

7️⃣ Euclidean GCD algorithm: Use the Euclidean algorithm to compute the greatest common divisor (GCD) of two integers (0 ≤ n < m).
